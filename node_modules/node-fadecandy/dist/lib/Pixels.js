'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var VideoFramePacket = require('./VideoFramePacket');

/*

    In a type 0 packet, the USB packet contains up to 21 pixels of 24-bit RGB color data.
    The last packet (index 24) only needs to contain 8 valid pixels.
    Pixels 9-20 in these packets are ignored.

    https://github.com/scanlime/fadecandy/blob/master/doc/fc_protocol_usb.md#video-packets

*/
module.exports = function () {
    function Pixels(fadeCandyInterface) {
        _classCallCheck(this, Pixels);

        this.__fci = fadeCandyInterface;
    }

    _createClass(Pixels, [{
        key: 'send',
        value: function send(data, cb) {
            var packet = new VideoFramePacket();
            this.__fci.send(packet.create(data), cb);
        }
    }]);

    return Pixels;
}();
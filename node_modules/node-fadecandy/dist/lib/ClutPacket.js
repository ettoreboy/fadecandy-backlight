'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FadeCandyPacket = require('./FadeCandyPacket');

/*

    In a type 1 packet, the USB packet contains up to 31 lookup-table entries.

    The lookup table is structured as three arrays of 257 entries, starting
    with the entire red-channel LUT, then the green-channel LUT, then the blue-channel LUT.

    https://github.com/scanlime/fadecandy/blob/master/doc/fc_protocol_usb.md#color-lut-packets
*/

module.exports = function (_FadeCandyPacket) {
    _inherits(ClutPacket, _FadeCandyPacket);

    function ClutPacket(data) {
        var _ret;

        _classCallCheck(this, ClutPacket);

        var _this = _possibleConstructorReturn(this, (ClutPacket.__proto__ || Object.getPrototypeOf(ClutPacket)).call(this));

        _this.type = 64; // 64
        _this.max_entries = 62;

        if (data) return _ret = _this.create(data), _possibleConstructorReturn(_this, _ret);
        return _this;
    }

    _createClass(ClutPacket, [{
        key: 'create',
        value: function create(data) {
            var _this2 = this;

            var pA = this.createPacketArray(data);

            // add reserved byte on index 1
            pA = pA.map(function (packet) {
                return _this2.concatTyped(Uint8Array, new Uint8Array(1), packet);
            });

            // add control byte on index 0
            pA = this.setControlBytes(pA);

            return this.createBuffer(pA);
        }
    }]);

    return ClutPacket;
}(FadeCandyPacket);
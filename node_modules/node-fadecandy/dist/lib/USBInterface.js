'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var debug = require('debug')('USBInterface');
var VENDOR_ID = 7504;
var PRODUCT_ID = 24698;

var events = {
    READY: 'ready',
    DETACHED: 'fadecandy_detached'
};

var usb = require('usb');

var EventEmitter = require('events');

module.exports = function (_EventEmitter) {
    _inherits(USBInterface, _EventEmitter);

    function USBInterface() {
        _classCallCheck(this, USBInterface);

        var _this = _possibleConstructorReturn(this, (USBInterface.__proto__ || Object.getPrototypeOf(USBInterface)).call(this));

        usb.on('attach', function (device) {
            return _this.__onDeviceAttach(device);
        }); // doesn't really work :(
        usb.on('detach', function (device) {
            return _this.__onDeviceDetach(device);
        });

        process.nextTick(function () {
            return _this.connect();
        });
        return _this;
    }

    _createClass(USBInterface, [{
        key: 'connect',
        value: function connect() {
            this.__getDevice();
        }
    }, {
        key: 'send',
        value: function send(data, cb) {
            var _this2 = this;

            this.endpoint.transfer(data, function (err) {
                return _this2.__onTransferComplete(err, cb);
            });
        }
    }, {
        key: '__onDeviceAttach',
        value: function __onDeviceAttach(device) {
            if (device.deviceDescriptor.idVendor == VENDOR_ID && device.deviceDescriptor.idProduct == PRODUCT_ID) {

                debug('__onDeviceAttach: device is ours');

                this.device = device;
                this.__init();
            }
        }
    }, {
        key: '__onDeviceDetach',
        value: function __onDeviceDetach(device) {
            debug('__onDeviceDetach');
            if (device.deviceDescriptor.idVendor == VENDOR_ID && device.deviceDescriptor.idProduct == PRODUCT_ID) {
                this.emit(events.DETACHED);
            }
        }
    }, {
        key: '__onTransferComplete',
        value: function __onTransferComplete(err, cb) {
            if (err) {
                console.log('endpoint transfer error', err);
                this.emit(events.TRANSFERERROR, err);
                return;
            }

            if (cb) cb();

            debug('transfer complete');
        }
    }, {
        key: '__init',
        value: function __init() {
            this.endpoint = this.__getEndpoint();

            debug('has endpoint');

            this.emit(events.READY, this.endpoint);
        }
    }, {
        key: '__getDevice',
        value: function __getDevice() {
            this.device = usb.findByIds(VENDOR_ID, PRODUCT_ID);

            debug('has device: ' + !this.device);

            if (this.device) this.__init();
        }
    }, {
        key: '__getEndpoint',
        value: function __getEndpoint() {
            this.configDescriptor = this.device.configDescriptor;

            this.device.open();

            var fci = this.device.interface(0);

            fci.claim();

            return fci.endpoint(1);
        }
    }], [{
        key: 'events',
        get: function get() {
            return events;
        }
    }]);

    return USBInterface;
}(EventEmitter);
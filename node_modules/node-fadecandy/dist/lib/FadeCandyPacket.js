'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MAX_SIZE = 64;

/*

set ctrl byte
    typecode
        0 videoframe (indexrange 0-24) (1 packet contains 21 pixels)
        1 CLUT (indexrange 0-24) (1 packet contains 31 16-bit lookup table entries)
        2 configuration

    final bit / by data
    packet index / by data

data must be single or multiple 64 byte packets



entries     // 63 for pixels (r + g + b)
            // 62 for LUT entries (high + low)
            // 1 for config


 */

module.exports = function () {
    function FadeCandyPacket() {
        _classCallCheck(this, FadeCandyPacket);

        this.MAX_SIZE = MAX_SIZE;
    }

    _createClass(FadeCandyPacket, [{
        key: 'pad',
        value: function pad(packet) {
            if (packet.length < MAX_SIZE) {
                packet = this.concatTyped(Uint8Array, packet, new Uint8Array(MAX_SIZE - packet.length));
            }
            return packet;
        }
    }, {
        key: 'createPacketArray',
        value: function createPacketArray(data) {
            var packetArray = [];
            var iterateCount = Math.ceil(data.length / this.max_entries);

            for (var i = 0; i < iterateCount; i++) {
                packetArray.push(data.slice(i * this.max_entries, i * this.max_entries + this.max_entries));
            }

            return packetArray;
        }
    }, {
        key: 'setControlBytes',
        value: function setControlBytes(packetArray) {
            var _this = this;

            return packetArray.map(function () {
                for (var _len = arguments.length, arg = Array(_len), _key = 0; _key < _len; _key++) {
                    arg[_key] = arguments[_key];
                }

                return _this.addControlByte.apply(_this, arg);
            });
        }
    }, {
        key: 'addControlByte',
        value: function addControlByte(packet, index, packetArray) {
            var ctrlByte = new Uint8Array(1);
            var final = index + 1 === packetArray.length;

            ctrlByte[0] |= this.type;
            ctrlByte[0] |= index;

            if (final) {
                ctrlByte[0] |= 32;
            }

            packet = this.concatTyped(Uint8Array, ctrlByte, packet);

            return packet;
        }
    }, {
        key: 'createBuffer',
        value: function createBuffer(packetArray) {
            var _this2 = this;

            packetArray = packetArray.map(function (packet) {
                return _this2.pad(packet);
            });

            return Buffer.concat(packetArray.map(function (packet) {
                return Buffer.from(packet);
            }));
        }
    }, {
        key: 'concatTyped',
        value: function concatTyped(resultConstructor) {
            var totalLength = 0;

            for (var _len2 = arguments.length, arrays = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                arrays[_key2 - 1] = arguments[_key2];
            }

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = arrays[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var arr = _step.value;

                    totalLength += arr.length;
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            var result = new resultConstructor(totalLength);
            var offset = 0;
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = arrays[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var _arr = _step2.value;

                    result.set(_arr, offset);
                    offset += _arr.length;
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            return result;
        }
    }], [{
        key: 'MAX_SIZE',
        get: function get() {
            return MAX_SIZE;
        }
    }]);

    return FadeCandyPacket;
}();
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _defaults, _bitmask;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ConfigurationPacket = require('./ConfigurationPacket');

var schema = {
    MODE: 'mode',
    LED_STATUS: 'led_status',
    LED_MODE: 'led_mode',
    DISABLE_KEYFRAME_INTERPOLATION: 'disable_keyframe_interpolation',
    DISABLE_DITHERING: 'disable_dithering'
};

var defaults = (_defaults = {}, _defineProperty(_defaults, schema.MODE, 0), _defineProperty(_defaults, schema.LED_STATUS, 0), _defineProperty(_defaults, schema.LED_MODE, 0), _defineProperty(_defaults, schema.DISABLE_KEYFRAME_INTERPOLATION, 0), _defineProperty(_defaults, schema.DISABLE_DITHERING, 0), _defaults);

var bitmask = (_bitmask = {}, _defineProperty(_bitmask, schema.MODE, 16), _defineProperty(_bitmask, schema.LED_STATUS, 8), _defineProperty(_bitmask, schema.LED_MODE, 4), _defineProperty(_bitmask, schema.DISABLE_KEYFRAME_INTERPOLATION, 2), _defineProperty(_bitmask, schema.DISABLE_DITHERING, 1), _bitmask);

module.exports = function () {
    function Configuration() {
        var defaultConfiguration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaults;
        var fadeCandyInterface = arguments[1];

        _classCallCheck(this, Configuration);

        this.__configuration = defaults;
        this.__fci = fadeCandyInterface;
        this.__update(defaultConfiguration);
    }

    _createClass(Configuration, [{
        key: 'set',
        value: function set(key, value) {
            if (typeof key !== 'string') return this.__update(key);

            this.__update(_defineProperty({}, key, value));
        }
    }, {
        key: 'get',
        value: function get(key) {
            if (!key) return this.__configuration;

            return this.__configuration[key];
        }
    }, {
        key: '__update',
        value: function __update(obj) {

            if (!this.__validate(obj)) throw new Error('Invalid configuration!');

            Object.assign(this.__configuration, obj);

            this.__fci.send(this.__createPacket());
        }
    }, {
        key: '__validate',
        value: function __validate(obj) {
            return Object.keys(obj).reduce(function (prev, current) {
                if (!prev) return prev;

                return !!schema[current.toUpperCase()];
            }, true);
        }
    }, {
        key: '__createPacket',
        value: function __createPacket() {
            var _this = this;

            var packet = new ConfigurationPacket();
            var data = new Uint8Array(1);

            Object.keys(this.__configuration).forEach(function (key) {
                if (!!_this.__configuration[key]) data[0] = data[0] | bitmask[key];
            });

            return packet.create(data);
        }
    }], [{
        key: 'schema',
        get: function get() {
            return schema;
        }
    }]);

    return Configuration;
}();
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FadeCandyPacket = require('./FadeCandyPacket');

/*

    In a type 0 packet, the USB packet contains up to 21 pixels of 24-bit RGB color data.
    The last packet (index 24) only needs to contain 8 valid pixels.
    Pixels 9-20 in these packets are ignored.

    https://github.com/scanlime/fadecandy/blob/master/doc/fc_protocol_usb.md#video-packets
*/

module.exports = function (_FadeCandyPacket) {
    _inherits(VideoFramePacket, _FadeCandyPacket);

    function VideoFramePacket(data) {
        var _ret;

        _classCallCheck(this, VideoFramePacket);

        var _this = _possibleConstructorReturn(this, (VideoFramePacket.__proto__ || Object.getPrototypeOf(VideoFramePacket)).call(this));

        _this.type = 0; // 0
        _this.max_entries = 63;

        if (data) return _ret = _this.create(data), _possibleConstructorReturn(_this, _ret);
        return _this;
    }

    _createClass(VideoFramePacket, [{
        key: 'create',
        value: function create(data) {

            var pA = this.createPacketArray(data);

            // add control byte on index 0
            pA = this.setControlBytes(pA);

            return this.createBuffer(pA);
        }
    }]);

    return VideoFramePacket;
}(FadeCandyPacket);
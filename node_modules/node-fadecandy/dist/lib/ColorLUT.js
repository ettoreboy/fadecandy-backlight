'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EventEmitter = require('events');
var ClutPacket = require('./ClutPacket');

var events = {
    READY: 'ready'
};

/*

    In a type 1 packet, the USB packet contains up to 31 lookup-table entries.

    The lookup table is structured as three arrays of 257 entries, starting
    with the entire red-channel LUT, then the green-channel LUT, then the blue-channel LUT.

    default LUT generated based on this example in python
    https://github.com/scanlime/fadecandy/blob/master/examples/python/usb-lowlevel.py

*/
module.exports = function (_EventEmitter) {
    _inherits(ColorLUT, _EventEmitter);

    function ColorLUT(fadeCandyInterface) {
        _classCallCheck(this, ColorLUT);

        var _this = _possibleConstructorReturn(this, (ColorLUT.__proto__ || Object.getPrototypeOf(ColorLUT)).call(this));

        _this.__fci = fadeCandyInterface;
        _this.ready = false;
        return _this;
    }

    _createClass(ColorLUT, [{
        key: 'create',
        value: function create(data) {
            var _this2 = this;

            if (!data) data = this.generateDefault();

            var packet = new ClutPacket();

            if (this.__fci) this.__fci.send(packet.create(data), function () {
                return _this2.__onCLUTtransfer();
            });
        }
    }, {
        key: 'generateDefault',
        value: function generateDefault() {
            var lut = new Uint8Array(3 * 257 * 2);

            // for channel in range(3):
            for (var channel = 0; channel < 3; channel++) {

                //for row in range(257):
                for (var row = 0; row < 257; row++) {

                    var value = Math.min(0xFFFF, Math.floor(Math.pow(row / 256, 2.2) * 0x10000));
                    var i = channel * 257 + row;

                    lut[i * 2] = value & 0xFF; // entry high byte
                    lut[i * 2 + 1] = value >> 8; // entry low byte
                }
            }

            return lut;
        }
    }, {
        key: '__onCLUTtransfer',
        value: function __onCLUTtransfer() {
            this.ready = true;
            this.emit(events.READY);
        }
    }], [{
        key: 'events',
        get: function get() {
            return events;
        }
    }]);

    return ColorLUT;
}(EventEmitter);
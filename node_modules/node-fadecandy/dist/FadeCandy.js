'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var debug = require('debug')('FadeCandy');
var EventEmitter = require('events');
var Configuration = require('./lib/Configuration');
var ColorLUT = require('./lib/ColorLUT');
var Pixels = require('./lib/Pixels');
var USBInterface = require('./lib/USBInterface');

var events = {
    READY: 'ready',
    COLOR_LUT_READY: 'clut_ready'
};

module.exports = function (_EventEmitter) {
    _inherits(FadeCandy, _EventEmitter);

    function FadeCandy() {
        _classCallCheck(this, FadeCandy);

        var _this = _possibleConstructorReturn(this, (FadeCandy.__proto__ || Object.getPrototypeOf(FadeCandy)).call(this));

        _this.usb = new USBInterface();
        _this.usb.on(USBInterface.events.READY, function () {
            return _this.__onInterfaceReady();
        });

        _this.Pixels = Pixels;
        _this.ColorLUT = ColorLUT;
        _this.Configuration = Configuration;
        _this.USBInterface = USBInterface;
        return _this;
    }

    _createClass(FadeCandy, [{
        key: '__onInterfaceReady',
        value: function __onInterfaceReady() {
            var _this2 = this;

            debug('USB interface ready');

            this.pixel = new Pixels(this.usb);
            this.clut = new ColorLUT(this.usb);
            this.clut.on(ColorLUT.events.READY, function () {
                return _this2.emit(events.COLOR_LUT_READY, _this2);
            });
            this.config = new Configuration({}, this.usb);

            this.emit(events.READY, this);
        }
    }, {
        key: 'send',
        value: function send(pixelData, cb) {
            if (this.clut.ready) return this.pixel.send(pixelData, cb);

            debug('tried to send, but CLUT was not set');
        }
    }], [{
        key: 'events',
        get: function get() {
            return events;
        }
    }, {
        key: 'Pixels',
        get: function get() {
            return Pixels;
        }
    }, {
        key: 'ColorLUT',
        get: function get() {
            return ColorLUT;
        }
    }, {
        key: 'Configuration',
        get: function get() {
            return Configuration;
        }
    }, {
        key: 'USBInterface',
        get: function get() {
            return USBInterface;
        }
    }]);

    return FadeCandy;
}(EventEmitter);